import os
from flask import Flask, request
import telebot
import json

app = Flask(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
HOTEL_PROGRAMS = {
    "Marriott Bonvoy": {
        "styles": ["business", "luxury", "modern"],
        "price_range": ["mid-range", "premium"],
        "description": "–ü–æ–Ω–∞–¥ 7600 –≥–æ—Ç–µ–ª—ñ–≤. –ü—Ä–µ–º—ñ—É–º –ø—Ä–æ–≥—Ä–∞–º–∞ –∑ –≤–µ–ª–∏–∫–∏–º –ø–æ–∫—Ä–∏—Ç—Ç—è–º."
    },
    "Hilton Honors": {
        "styles": ["business", "classic", "contemporary"],
        "price_range": ["budget", "mid-range"],
        "description": "–ë—ñ–ª—å—à–µ 6500 –≥–æ—Ç–µ–ª—ñ–≤. –ó—Ä—É—á–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –±—ñ–∑–Ω–µ—Å-–º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫—ñ–≤."
    },
    "IHG Rewards": {
        "styles": ["family-friendly", "budget", "modern"],
        "price_range": ["budget", "mid-range"],
        "description": "–ü–æ–Ω–∞–¥ 5900 –≥–æ—Ç–µ–ª—ñ–≤. –ù–∞–π–∫—Ä–∞—â–µ –¥–ª—è –µ–∫–æ–Ω–æ–º–Ω–∏—Ö –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫—ñ–≤."
    },
    "Hyatt World": {
        "styles": ["luxury", "business", "modern"],
        "price_range": ["mid-range", "premium"],
        "description": "–ü—Ä–µ–º—ñ—É–º –≥–æ—Ç–µ–ª—ñ –∑ –≤–∏—Å–æ–∫–∏–º —Ä—ñ–≤–Ω–µ–º —Å–µ—Ä–≤—ñ—Å—É."
    }
}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.environ['TELEGRAM_BOT_TOKEN'])

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

def find_matching_programs(styles, price_range):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º"""
    matching_programs = []
    for program, details in HOTEL_PROGRAMS.items():
        style_match = any(style in details['styles'] for style in styles)
        price_match = price_range in details['price_range']
        
        if style_match and price_match:
            matching_programs.append((program, details['description']))
    
    return matching_programs

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    buttons = [
        telebot.types.KeyboardButton("üíº –î—ñ–ª–æ–≤–∏–π"),
        telebot.types.KeyboardButton("üèñ –†–æ–∑—Å–ª–∞–±–ª–µ–Ω–∏–π"),
        telebot.types.KeyboardButton("üåü –†–æ–∑–∫—ñ—à–Ω–∏–π"),
        telebot.types.KeyboardButton("üí∞ –ï–∫–æ–Ω–æ–º–Ω–∏–π")
    ]
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤—ñ—Ç! üè® –î–æ–ø–æ–º–æ–∂—É –æ–±—Ä–∞—Ç–∏ Program Loyalty\n\n–Ø–∫–∏–π —Å—Ç–∏–ª—å –ø–æ–¥–æ—Ä–æ–∂–µ–π –≤–∞–º–±–ª–∏–∂—á–µ?", 
        reply_markup=markup
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_states[message.chat.id] = {"stage": "style"}

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    
    if chat_id not in user_states:
        start_message(message)
        return
    
    stage = user_states[chat_id].get('stage')
    
    style_map = {
        "üíº –î—ñ–ª–æ–≤–∏–π": ["business"],
        "üèñ –†–æ–∑—Å–ª–∞–±–ª–µ–Ω–∏–π": ["contemporary"],
        "üåü –†–æ–∑–∫—ñ—à–Ω–∏–π": ["luxury"],
        "üí∞ –ï–∫–æ–Ω–æ–º–Ω–∏–π": ["budget"]
    }
    
    price_map = {
        "üí∏ –ë—é–¥–∂–µ—Ç–Ω–∏–π": "budget",
        "üè¶ –°–µ—Ä–µ–¥–Ω—ñ–π": "mid-range",
        "üíé –ü—Ä–µ–º—ñ—É–º": "premium"
    }
    
    if stage == 'style':
        chosen_style = style_map.get(message.text, ["business"])
        user_states[chat_id]["chosen_styles"] = chosen_style
        user_states[chat_id]["stage"] = "price"
        
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
        buttons = [
            telebot.types.KeyboardButton("üí∏ –ë—é–¥–∂–µ—Ç–Ω–∏–π"),
            telebot.types.KeyboardButton("üè¶ –°–µ—Ä–µ–¥–Ω—ñ–π"),
            telebot.types.KeyboardButton("üíé –ü—Ä–µ–º—ñ—É–º")
        ]
        markup.add(*buttons)
        
        bot.send_message(
            chat_id, 
            "–Ø–∫–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞ –¥–ª—è –≤–∞—Å —Ü—ñ–Ω–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è?", 
            reply_markup=markup
        )
    
    elif stage == 'price':
        chosen_price = price_map.get(message.text, "mid-range")
        user_states[chat_id]["chosen_price"] = chosen_price
        
        styles = user_states[chat_id]["chosen_styles"]
        price_range = user_states[chat_id]["chosen_price"]
        
        recommendations = find_matching_programs(styles, price_range)
        
        if recommendations:
            result_message = "üè® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ:\n\n"
            for program, description in recommendations:
                result_message += f"‚Ä¢ *{program}*\n{description}\n\n"
        else:
            result_message = "‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏."
        
        bot.send_message(chat_id, result_message, parse_mode='Markdown')
        del user_states[chat_id]  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω

@app.route('/')
def home():
    return "–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"

@app.route(f'/{os.environ["TELEGRAM_BOT_TOKEN"]}', methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "OK"

def set_webhook():
    bot.set_webhook(url=f'https://your-app-name.railway.app/{os.environ["TELEGRAM_BOT_TOKEN"]}')

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
